name: ServiceM8 API Token Extractor

on:
  # schedule:
    # Run every 15 minutes (change the number to adjust frequency)
    # - cron: '*/15 * * * *'
  workflow_dispatch: # Allow manual trigger only

jobs:
  extract-and-send:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install Chrome and ChromeDriver
      uses: browser-actions/setup-chrome@latest
      with:
        chrome-version: stable
        
    - name: Install additional Chrome dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          wget \
          gnupg \
          unzip \
          curl \
          xvfb \
          libnss3-dev \
          libatk-bridge2.0-dev \
          libdrm2 \
          libxkbcommon0 \
          libxcomposite1 \
          libxdamage1 \
          libxrandr2 \
          libgbm1 \
          libxss1 \
          libasound2t64
          
    - name: Verify Chrome installation
      run: |
        echo "Chrome version:"
        google-chrome --version
        echo "ChromeDriver version:"
        chromedriver --version
        echo "Chrome binary location:"
        which google-chrome
        echo "ChromeDriver location:"
        which chromedriver
        
    - name: Create .env file
      run: |
        echo "EMAIL=${{ secrets.SERVICEM8_EMAIL }}" >> .env
        echo "PASSWORD=${{ secrets.SERVICEM8_PASSWORD }}" >> .env
        echo "DEBUG: .env file created"
        ls -la .env
        echo "DEBUG: .env contents (masked):"
        sed 's/=.*/=***MASKED***/' .env
        
    - name: Run ServiceM8 extraction
      run: |
        # Set display for headless Chrome
        export DISPLAY=:99
        # Start virtual display
        Xvfb :99 -screen 0 1920x1080x24 &
        sleep 3
        
        # Run the extraction script
        python main1_copy.py
        
        # Check if screenshots were created
        if [ -d "screenshots" ]; then
          echo "Screenshots directory found:"
          ls -la screenshots/
        else
          echo "No screenshots directory found"
        fi
        
    - name: Send data to webhook
      run: |
        python webhook_test.py
        
    - name: Upload results as artifact (optional)
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: servicem8-results-${{ github.run_number }}
        path: |
          result.json
          servicem8_extractor.log
          screenshots/
        retention-days: 7
